<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.ssm.back.mapper.UserMapper">
  <resultMap id="BaseResultMap" type="com.ssm.back.pojo.User">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="userName" jdbcType="VARCHAR" property="userName" />
    <result column="password" jdbcType="VARCHAR" property="password" />
    <result column="roleName" jdbcType="VARCHAR" property="roleName" />
  </resultMap>

	<resultMap type="com.ssm.back.pojo.User" id="UserResult">
		<result property="id" column="id" />
		<result property="userName" column="userName" />
		<result property="password" column="password" />
		<result property="roleName" column="roleName" />
	</resultMap>

	<select id="login" parameterType="com.ssm.back.pojo.User" resultMap="UserResult">
		select id,userName,password,roleName from
		ssm_user where userName=#{userName} and password=#{password} limit 1
	</select>
	
	<select id="findUsers" parameterType="Map" resultMap="UserResult">
        select id,userName,password,roleName from ssm_user
        <where>
            <if test="userName!=null and userName!='' ">
                and userName like #{userName}
            </if>
        </where>
        <if test="start!=null and size!=null">
            limit #{start},#{size}
        </if>
    </select>
	  
	<select id="getTotalUser" parameterType="Map" resultType="Long">
        select count(*) from ssm_user
        <where>
            <if test="userName!=null and userName!='' ">
                and userName like #{userName}
            </if>
        </where>
    </select>
	
	<insert id="addUser" parameterType="User">
        insert into ssm_user(userName,password)
        values(#{userName},#{password})
    </insert>
	
	 <update id="updateUser" parameterType="User">
        update ssm_user
        <set>
            <if test="userName!=null and userName!='' ">
                userName=#{userName},
            </if>
            <if test="password!=null and password!='' ">
                password=#{password}
            </if>
        </set>
        where id=#{id}
    </update>

    <delete id="deleteUser" parameterType="Integer">
        delete from ssm_user
        where id=#{id}
    </delete>
	
	  
  <sql id="Example_Where_Clause">
    <where>
      <foreach collection="oredCriteria" item="criteria" separator="or">
        <if test="criteria.valid">
          <trim prefix="(" prefixOverrides="and" suffix=")">
            <foreach collection="criteria.criteria" item="criterion">
              <choose>
                <when test="criterion.noValue">
                  and ${criterion.condition}
                </when>
                <when test="criterion.singleValue">
                  and ${criterion.condition} #{criterion.value}
                </when>
                <when test="criterion.betweenValue">
                  and ${criterion.condition} #{criterion.value} and #{criterion.secondValue}
                </when>
                <when test="criterion.listValue">
                  and ${criterion.condition}
                  <foreach close=")" collection="criterion.value" item="listItem" open="(" separator=",">
                    #{listItem}
                  </foreach>
                </when>
              </choose>
            </foreach>
          </trim>
        </if>
      </foreach>
    </where>
  </sql>
  <sql id="Base_Column_List">
    id, userName, password, roleName
  </sql>
  <select id="selectByExample" parameterType="com.ssm.back.pojo.UserExample" resultMap="BaseResultMap">
    select
    <if test="distinct">
      distinct
    </if>
    'false' as QUERYID,
    <include refid="Base_Column_List" />
    from ssm_user
    <if test="_parameter != null">
      <include refid="Example_Where_Clause" />
    </if>
    <if test="orderByClause != null">
      order by ${orderByClause}
    </if>
  </select>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from ssm_user
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from ssm_user
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" keyColumn="id" keyProperty="id" parameterType="com.ssm.back.pojo.User" useGeneratedKeys="true">
    insert into ssm_user (userName, password, roleName
      )
    values (#{userName,jdbcType=VARCHAR}, #{password,jdbcType=VARCHAR}, #{roleName,jdbcType=VARCHAR}
      )
  </insert>
  <insert id="insertSelective" keyColumn="id" keyProperty="id" parameterType="com.ssm.back.pojo.User" useGeneratedKeys="true">
    insert into ssm_user
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="userName != null">
        userName,
      </if>
      <if test="password != null">
        password,
      </if>
      <if test="roleName != null">
        roleName,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="userName != null">
        #{userName,jdbcType=VARCHAR},
      </if>
      <if test="password != null">
        #{password,jdbcType=VARCHAR},
      </if>
      <if test="roleName != null">
        #{roleName,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.ssm.back.pojo.User">
    update ssm_user
    <set>
      <if test="userName != null">
        userName = #{userName,jdbcType=VARCHAR},
      </if>
      <if test="password != null">
        password = #{password,jdbcType=VARCHAR},
      </if>
      <if test="roleName != null">
        roleName = #{roleName,jdbcType=VARCHAR},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.ssm.back.pojo.User">
    update ssm_user
    set userName = #{userName,jdbcType=VARCHAR},
      password = #{password,jdbcType=VARCHAR},
      roleName = #{roleName,jdbcType=VARCHAR}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>